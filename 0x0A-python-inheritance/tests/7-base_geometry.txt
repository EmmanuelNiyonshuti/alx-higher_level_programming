"""
Testing BaseGeometry class using doctest model.

>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

>>> bg = BaseGeometry()
>>> bg.integer_validator("my_int", 12)
'my_int'
>>> bg.integer_validator("width", 89)
'width'
>>> try:
...     bg.integer_validator("name", "John")
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
...
[TypeError] name must be an integer
>>> try:
...     bg.integer_validator("age", 0)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
...
[ValueError] age must be greater than 0
>>> try:
...     bg.integer_validator("distance", -4)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
...
[ValueError] distance must be greater than 0
>>> try:
...     bg.integer_validator("float_val", 3.14)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
...
[TypeError] float_val must be an integer
>>> try:
...     bg.integer_validator("string_int", "123")
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
...
[TypeError] string_int must be an integer
>>> try:
...     bg.integer_validator("negative_int", -10)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
...
[ValueError] negative_int must be greater than 0
>>> try:
...     bg.integer_validator("zero_val", 0)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
...
[ValueError] zero_val must be greater than 0
>>> bg.integer_validator("large_int", 10**10)
'large_int'